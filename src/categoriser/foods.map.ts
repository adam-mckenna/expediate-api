import { FoodCategory } from "./category.type";

// This is a comprehensive list of all potential grains. An adjective may be included at the start
// to determine whether they are whole or refined. By default, it is assumed that they are refined.
export const Grains = [
  "wheat",
  "barley",
  "rye",
  "corn",
  "rice",
  "bulgur",
  "spelt",
  "durum",
  "semolina",
  "flour",
  "bread",
  "pasta",
  "noodle",
  "spaghetti",
  "penne",
  "fusilli",
  "fettuccine",
  "linguine",
  "macaroni",
  "rigatoni",
  "farfalle",
  "tagliatelle",
  "orzo",
  "cavatappi",
  "rotini",
  "ziti",
  "pappardelle",
  "conchiglie",
  "lasagna",
  "tortellini",
  "ravioli",
  "gnocchi",
  "cannelloni",
  "orecchiette",
  "ditalini",
  "bucatini",
  "angel hair",
  "capellini",
  "gemelli",
  "manicotti",
  "trofie",
  "campanelle",
  "mezze penne",
  "vermicelli",
  "malloreddus",
  "strozzapreti",
  "polenta",
  "cornmeal",
  "grit",
  "couscous",
  "farina",
  "maida",
];
// We combine the grain with the potential adjectives to dynamically build a list of options.
export const WholeAdjectives = [
  "whole",
  "wholemeal",
  "whole meal",
  "wholegrain",
  "whole grain",
  "wild",
  "unrefined",
  "hulled",
  "steel cut",
  "steelcut",
  "stone ground",
  "stoneground",
  "cracked",
  "rolled",
  "pearled",
  "sprouted",
  "dehulled",
  "intact",
  "natural",
  "raw",
  "organic",
];
export const RefinedAdjectives = [
  "refined",
  "white",
  "enriched",
  "bleached",
  "degermed",
  "processed",
  "instant",
  "powdered",
  "polished",
  "bleached",
  "fortified",
  "whitewashed",
  "regular",
  "normal",
];

// This list means we can combine with the word "cheese" at the end.
const Cheeses = [
  "paneer",
  "cheddar",
  "mozzarella",
  "parmesan",
  "brie",
  "camembert",
  "gouda",
  "blue",
  "feta",
  "ricotta",
  "cottage",
  "cream",
  "colby",
  "lebneh",
  "labneh",
  "monterey jack",
  "swiss",
  "provolone",
  "asiago",
  "gruyere",
  "halloumi",
  "mascarpone",
  "roquefort",
  "emmental",
  "pecorino",
  "stilton",
  "queso fresco",
  "muenster",
  "fontina",
  "gorgonzola",
  "cabrales",
  "danablu",
  "bleu d'Auvergne",
];

// A list of meats that could be either fatty or lean, depending on how they are
//  described (e.g. low fat, fatty, reduced-fat, etc.)
const AmbigiousMeats = [
  "beef",
  "pork",
  "chicken",
  "turkey",
  "lamb",
  "duck",
  "goose",
  "venison",
  "bison",
  "elk",
  "wild boar",
  "ground beef",
  "ground pork",
  "ground chicken",
  "ground turkey",
  "ground lamb",
  "sausage",
  "deli meat",
  "burger",
  "meatball",
];
const FattyProteinAdjectives = [
  "fatty",
  "fat",
  "high fat",
  "marbled",
  "untrimmed",
  "skin-on",
  "whole",
  "energy dense",
  "calorie dense",
  "full fat",
  "fullfat",
  "rich in saturated fat",
];
const LeanMeatAdjectives = [
  "lean",
  "extra lean",
  "low fat",
  "trimmed",
  "skinless",
  "reduced fat",
  "low calorie",
  "fat trimmed",
  "high protein",
  "nutrient dense",
];

// Because the food will be dynamically "pluralised" later, all food items should be in singular form.
// This applies to food that would NEVER be in singular, such as "oat". A little confusing.
export const FoodCategoryMap: Record<FoodCategory, string[]> = {
  fruit: [
    "apple",
    "apricot",
    "avocado",
    "berry",
    "banana",
    "bilberry",
    "blackberry",
    "blackcurrant",
    "blueberry",
    "boysenberry",
    "breadfruit",
    "cantaloupe",
    "cherry",
    "clementine",
    "cloudberry",
    "coconut",
    "cranberry",
    "currant",
    "date",
    "dragonfruit",
    "durian",
    "elderberry",
    "feijoa",
    "fig",
    "goji berry",
    "gooseberry",
    "grape",
    "grapefruit",
    "guava",
    "honeydew",
    "jackfruit",
    "jambul",
    "jujube",
    "kiwi",
    "kumquat",
    "lemon",
    "lime",
    "lingonberry",
    "loquat",
    "longan",
    "lychee",
    "mirabella",
    "mandarin",
    "mango",
    "mangosteen",
    "melon",
    "mulberry",
    "nectarine",
    "olive",
    "orange",
    "papaya",
    "passionfruit",
    "peach",
    "pear",
    "persimmon",
    "pineapple",
    "plantain",
    "plum",
    "pomegranate",
    "pomelo",
    "quince",
    "raspberry",
    "redcurrant",
    "salak",
    "satsuma",
    "starfruit",
    "strawberry",
    "tamarillo",
    "tamarind",
    "tangerine",
    "ugli fruit",
    "watermelon",
    "white currant",
    "yuzu",
  ],
  vegetables: [
    "artichoke",
    "arugula",
    "asparagus",
    "aubergine",
    "beet",
    "beetroot",
    "bell pepper",
    "bok choy",
    "broccoli",
    "brussels sprout",
    "butternut squash",
    "cabbage",
    "carrot",
    "cauliflower",
    "celeriac",
    "celery",
    "chard",
    "chayote",
    "chicory",
    "collard",
    "courgette",
    "cress",
    "cucumber",
    "daikon",
    "dandelion green",
    "edamame",
    "eggplant",
    "endive",
    "fennel",
    "garlic",
    "ginger",
    "green bean",
    "horseradish",
    "jicama",
    "kale",
    "kohlrabi",
    "leek",
    "lettuce",
    "mushroom",
    "mustard green",
    "okra",
    "onion",
    "parsnip",
    "pea",
    "pepper",
    "red pepper",
    "orange pepper",
    "yellow pepper",
    "green pepper",
    "potato",
    "pumpkin",
    "radicchio",
    "radish",
    "rapini",
    "rhubarb",
    "rutabaga",
    "scallion",
    "shallot",
    "snap pea",
    "snow pea",
    "spinach",
    "spring onion",
    "squash",
    "sweet potato",
    "swede",
    "tomato",
    "turnip",
    "wasabi",
    "watercress",
    "yam",
    "zucchini",
  ],
  "lean-meat-and-fish": [
    "chicken breast",
    "turkey",
    "turkey breast",
    "pork tenderloin",
    "beef eye of round",
    "top sirloin",
    "flank steak",
    "venison loin",
    "bison sirloin",
    "elk round",
    "canadian bacon",
    "rabbit",
    "ostrich",
    "cod",
    "haddock",
    "pollock",
    "halibut",
    "sole",
    "flounder",
    "tilapia",
    "snapper",
    "trout",
    "salmon",
    "sardine",
    "anchovy",
    "mackerel",
    "tuna",
    "catfish",
    "grouper",
    "bass",
    "herring",
    "mahi-mahi",
    "barramundi",
    "carp",
    "perch",
    "pike",
    "char",
    "rockfish",
    "monkfish",
    "lingcod",
    "bluefish",
    "whiting",
    "cobia",
    "amberjack",
    ...[
      ...AmbigiousMeats.map((meat) =>
        LeanMeatAdjectives.map((adjective) => `${adjective} ${meat}`),
      ),
    ].flat(),
  ],
  "fatty-proteins": [
    "steak",
    "ribeye",
    "brisket",
    "short ribs",
    "pork belly",
    "bacon",
    "spare ribs",
    "lamb shoulder",
    "duck leg",
    "goose breast",
    "salami",
    "pepperoni",
    "chorizo",
    "corned beef",
    "pâté",
    "sausage",
    "chicken thigh",
    "chicken drumstick",
    ...[
      ...AmbigiousMeats.map((meat) =>
        FattyProteinAdjectives.map((adjective) => `${adjective} ${meat}`),
      ),
    ].flat(),
  ],
  "nuts-seeds": [
    "almond",
    "cashew",
    "walnut",
    "pecan",
    "hazelnut",
    "pistachio",
    "macadamia",
    "brazil nut",
    "pine nut",
    "chestnut",
    "peanut",
    "pumpkin seed",
    "sunflower seed",
    "chia seed",
    "flaxseed",
    "hemp seed",
    "sesame seed",
    "watermelon seed",
    "melon seed",
    "cumin seed",
    "caraway seed",
    "mustard seed",
    "poppy seed",
    "cottonseed",
    "almond butter",
    "cashew butter",
    "peanut butter",
    "hazelnut butter",
    "sunflower seed butter",
    "tahini",
  ],
  // These are grains that are inherently whole and are extremely rarely not sold "whole".
  "whole-grains": [
    "oat",
    "quinoa",
    "millet",
    "buckwheat",
    "amaranth",
    "freekeh",
    "farro",
    "emmer",
    "kamut",
    ...Grains.map((grain) =>
      WholeAdjectives.map((adjective) => `${adjective} ${grain}`),
    ).flat(),
  ],
  // These are grains that are inherently refined.
  "refined-grains": [
    "all-purpose flour",
    ...Grains,

    // All "base" grains terms (e.g. pasta, rice) are included here because if they are not specified,
    // we can assume that they are refined. Such is the way of the modern food system.
    ...Grains.map((grain) =>
      RefinedAdjectives.map((adjective) => `${adjective} ${grain}`),
    ).flat(),
  ],
  dairy: [
    "milk",
    "cheese",
    "yogurt",
    "curd",
    "kefir",
    "whey",
    "casein",
    "sour cream",
    "clotted cream",
    "evaporated milk",
    ...Cheeses,
    ...Cheeses.map((cheese) => `${cheese} cheese`),
  ],
  sweets: [
    "sweet",
    "candy",
    "chocolate",
    "fudge",
    "marshmallow",
    "caramel",
    "toffee",
    "lollipop",
    "gumdrop",
    "bonbon",
    "truffle",
    "nougat",
    "jellybean",
    "licorice",
    "cotton candy",
    "gelatin dessert",
    "brownie",
    "cookie",
    "cake",
    "cupcake",
    "donut",
    "muffin",
    "pastry",
    "tart",
    "pie",
    "pudding",
    "sorbet",
    "ice cream",
    "macaron",
    "cannoli",
    "baklava",
    "cheesecake",
    "soufflé",
    "crepe",
    "honey",
    "biscuit",
  ],
  "fried-foods": [
    "fried chicken",
    "tempura",
    "fritter",
    "fried fish",
    "onion ring",
    "french fry",
    "potato chip",
    "doughnut",
    "samosa",
    "spring roll",
    "egg roll",
    "churro",
    "beignet",
    "crisp",
    "chips",
    "pakora",
    "fish and chip",
    "corn dog",
    "zeppole",
    "arancini",
    "falafel",
    "fried shrimp",
    "fried calamari",
    "fried rice",
    "fried tofu",
    "fried plantain",
    "fried green tomato",
    "fried wonton",
  ],
  unknown: [],
};

// We only need to provide plural rules if the plural does not end in "s"
const pluralOverrides: Record<string, string> = {
  berry: "berries",
  cherry: "cherries",
  pastry: "pastries",
  candy: "candies",
  cookie: "cookies",
  patty: "patties",
  fry: "fries",
  potato: "potatoes",
  tomato: "tomatoes",
  loaf: "loaves",
  leaf: "leaves",
  calf: "calves",
  goose: "geese",
  fungus: "fungi",
  cactus: "cacti",
};

export const singularise = (food: string): string => {
  for (const [singular, plural] of Object.entries(pluralOverrides)) {
    if (food === plural) return singular;
  }
  // Remove trailing 's' if not a known irregular plural
  if (food.endsWith("s")) {
    return food.slice(0, -1);
  }
  return food;
};
